<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tech.usopla.com]]></title>
  <link href="http://tech.usopla.com/atom.xml" rel="self"/>
  <link href="http://tech.usopla.com/"/>
  <updated>2012-12-26T01:05:41+09:00</updated>
  <id>http://tech.usopla.com/</id>
  <author>
    <name><![CDATA[monzou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[HoneyAnt]]></title>
    <link href="http://tech.usopla.com/blog/2012/12/26/honeyant/"/>
    <updated>2012-12-26T00:02:00+09:00</updated>
    <id>http://tech.usopla.com/blog/2012/12/26/honeyant</id>
    <content type="html"><![CDATA[<p>少し時間があったので, <a href="https://github.com/monzou/honeyant">HoneyAnt</a> という Eclipse Plugin を公開しました。
これは Eclipse 上でインクリメンタルに <a href="http://ant.apache.org/">Ant</a> を実行するというプラグインで, 特定のアノテーションが付いたファイルを編集すると, 自動的に Ant が実行されるという機能を提供します。</p>

<h2>HoneyAnt の使い方</h2>

<p>HoneyAnt を clone すると <code>honeyant-feature-updatesite</code> というプロジェクトがあるので, これを Eclipse でインストールしてください。再起動すると, Java プロジェクトのプロパティに「HoneyAnt」という項が増えているはずです。サンプルとして <code>honeyant-example</code> というプロジェクトも用意しているので, ひとまずこれをベースに説明します。</p>

<p>honeyant-example のプロパティを見ると, HoneyAnt が有効になっており, [ Builders ] に HoneyAnt Runner というビルダが追加されていることが分かると思います。これがインクリメンタルビルドを実行するビルダです。次に Person.java というファイルを開いてください。ただのバリューオブジェクトですが, <code>@HoneyAnt</code> というアノテーションを付与しています（※アノテーションは自由に指定出来ます）。ではここに <code>String sex</code> というプロパティを追加して保存してみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Buildfile: xxx\honeyant-example\honeyant.xml
</span><span class='line'>
</span><span class='line'>honeyant:
</span><span class='line'>     [echo] HoneyAnt incremental build: com.usopla.honeyant.example.source.Person (xxx\honeyant-example\src\main\java\com\usopla\honeyant\example\source\Person.java)
</span><span class='line'>     [dump] dump to xxx\honeyant-example\dest\dump.txt
</span><span class='line'>
</span><span class='line'>refresh:
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>
</span><span class='line'>BUILD SUCCESSFUL
</span><span class='line'>Total time: 0 seconds</span></code></pre></td></tr></table></div></figure>


<p>すると自動的に Ant が実行され, このようなログが表示されます。dump.txt を見てみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>path=xxx\honeyant-example\src\main\java\com\usopla\honeyant\example\source\Person.java
</span><span class='line'>class : com.usopla.honeyant.example.source.Person
</span><span class='line'>package : com.usopla.honeyant.example.source
</span><span class='line'>fields -&gt;
</span><span class='line'>  name (java.lang.String)
</span><span class='line'>  age (int)
</span><span class='line'>  sex (java.lang.String)</span></code></pre></td></tr></table></div></figure>


<p>このように編集後のクラス定義を元にファイルが自動生成されています。ここで実行しているのは <a href="https://github.com/monzou/honeyant/blob/master/honeyant-example/src/main/java/com/usopla/honeyant/example/task/DumpTask.java"><code>DumpTask</code></a> というサンプルの Ant タスクで, クラス情報をリフレクションして適当に出力しています。</p>

<h2>何故つくったか？</h2>

<p>2 年程前に仕事で新しいパッケージプロダクトを作ることになり, そのときにつくったものです（もちろん同じものではなく, 全体的にリファインして HoneyAnt として公開しています）。当時 <a href="http://www.hibernate.org/">Hibernate</a> を使っていたのですが, 折角 O/R マッパーを使っているのにタイプセーフにクエリが書けないことに不満を感じていました。Hibernate には Criteria API というものが存在し, これを使うとある程度オブジェクト指向的にクエリを書くことが出来るのですが, これは（属性名の文字列指定や型情報の欠落を伴う）ランタイムバインドを行うもので, 安全性・保守性・生産性の面から好ましくありませんでした。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Hibernate の Criteria API</span>
</span><span class='line'><span class="c1">// プロパティ名を文字列で指定。引数も Object 型。</span>
</span><span class='line'><span class="n">Criteria</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">(</span><span class="n">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'><span class="n">criteria</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Restrictions</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;Fritz%&quot;</span><span class="o">));</span>
</span><span class='line'><span class="n">criteria</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>  <span class="n">Restrictions</span><span class="o">.</span><span class="na">or</span><span class="o">(</span>
</span><span class='line'>    <span class="n">Restrictions</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span> <span class="c1">// 文字列でもバインド出来てしまう</span>
</span><span class='line'>    <span class="n">Restrictions</span><span class="o">.</span><span class="na">isNull</span><span class="o">(</span><span class="s">&quot;age&quot;</span><span class="o">)</span> <span class="c1">// プロパティ名を間違えたらランタイムエラーになる</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>「どうにかタイプセーフに出来ないものか」と悩んでいた当時, <a href="https://sites.google.com/site/slim3appengine/">Slim3</a> のタイプセーフなクエリに感銘を受けて「コレだ！」と思ったのでした。リフレクションを使うのではなく, 予めエンティティのメタ情報を定義しておき, これを用いてクライテリアを表現すればパフォーマンス面でも型安全性の面でも良いのだと気付いたのでした。また 「折角メタ情報を作るのであれば, エンティティのメタ定義からエンティティ, DDL, hbm, クライテリア用のメタクラスも全て自動生成すれば夢が広がるなぁ」などと思いつき, これを実現する方法を考えてみることにしました。</p>

<p>自動生成の実現にあたって, 最初は Slim3 と同じように <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/apt/index.html">APT (Annotation Processing Tool)</a> を用いた自動生成を行おうとしたのですが, APT は意外と自由度が低くファイルの自動生成にはあまり向いていないなと感じました。当初エンティティのメタ情報を Java もしくは Groovy クラスとして定義し, そのクラス情報をリフレクション経由で取得してファイルを自動生成しようとしていたのですが, APT を使うと修正しているファイルのクラス情報を完全に取得することが出来ません（でした……今は違うのかもしれません）。「特定のファイルを編集したときに, もっと自由に自動生成したいなぁ」と思い, Eclipse の Ant を自動的に実行すれば良いかな、と思いついたのでひとまず Eclipse の Plugin をプロトタイプしてみることにしました。Plugin の作り方なんてさっぱり知らなかったのですが, 本やコードを読みながら 2〜3 日ほどかけて実装してみると, 思いのほか上手くいったので APT は止めて Eclipse Plugin にすることにしました。結果的にできあがったのが HoneyAnt でした。</p>

<h2>実際にどのように使ったか？</h2>

<p>さて, 当時の PJ ではエンティティは全てメタ定義（Java クラス・ランタイムでアプリケーションに含まれない）を元に HoneyAnt で自動生成しました。例えば <a href="http://www.redmine.org/">Redmine</a> のようなプロジェクト管理アプリケーションの「プロジェクト」をサンプルにすると, メタ定義はこんな感じです（適当な例にしています）。テーブル名やカラム名をデフォルトで推測したり, Hibernate の主要な機能は一通り使えるようにしたりしました。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@HoneyAnt</span><span class="o">(</span><span class="s">&quot;ユーザー&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserSource</span> <span class="kd">extends</span> <span class="n">ClassSource</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;ID&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">NumberProperty</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">id</span> <span class="o">=</span> <span class="n">sequenceIdProperty</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;名前&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">StringProperty</span> <span class="n">name</span> <span class="o">=</span> <span class="n">stringProperty</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">notNull</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;メールアドレス&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">StringProperty</span> <span class="n">email</span> <span class="o">=</span> <span class="n">stringProperty</span><span class="o">(</span><span class="mi">50</span><span class="o">).</span><span class="na">notNull</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;管理者&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">BooleanProperty</span> <span class="n">admin</span> <span class="o">=</span> <span class="n">primitiveBooleanProperty</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;ステータス&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">UserTypeProperty</span><span class="o">&lt;</span><span class="n">UserStatus</span><span class="o">&gt;</span> <span class="n">status</span> <span class="o">=</span> <span class="n">userTypeProperty</span><span class="o">(</span><span class="n">UserStatus</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">notNull</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@HoneyAnt</span><span class="o">(</span><span class="s">&quot;プロジェクト&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProjectSource</span> <span class="kd">extends</span> <span class="n">ClassSource</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;ID&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">NumberProperty</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">id</span> <span class="o">=</span> <span class="n">sequenceIdProperty</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;序数&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">NumberProperty</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sequenceNo</span> <span class="o">=</span> <span class="n">primitiveIntProperty</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;名称&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">StringProperty</span> <span class="n">name</span> <span class="o">=</span> <span class="n">stringProperty</span><span class="o">(</span><span class="mi">50</span><span class="o">).</span><span class="na">notNull</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;ステータス&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">UserTypeProperty</span><span class="o">&lt;</span><span class="n">ProjectStatus</span><span class="o">&gt;</span> <span class="n">status</span> <span class="o">=</span> <span class="n">userTypeProperty</span><span class="o">(</span><span class="n">ProjectStatus</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">notNull</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Property</span><span class="o">(</span><span class="s">&quot;メンバー&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@Index</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;IXA_PROJECT_01&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="n">ManyToManyProperty</span><span class="o">&lt;</span><span class="n">User</span><span class="o">&gt;&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="n">manyToMany</span><span class="o">(</span><span class="n">UserSource</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;PROJECT_USER_RELATION&quot;</span><span class="o">).</span><span class="na">lazy</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このファイルからおおよそ以下が HoneyAnt により自動生成されます。</p>

<ol>
<li>エンティティ・エンティティの基底クラス（Generation Gap パターン）</li>
<li>エンティティメタクラス・エンティティメタ基底クラス（Generation Gap パターン）</li>
<li>hbm</li>
<li>DDL</li>
<li>テーブル定義書等</li>
</ol>


<p>これだけでも十分便利なのですが, このときに一番実現したかったものは「タイプセーフなクエリ」です。これを実現する際の肝になっているのが 2. の「エンティティメタクラス」です。このメタクラスを使用してタイプセーフクライテリアを実現しました。タイプセーフクライテリアの実現に当たっては, まずタイプセーフなクライテリア API を作り, 次に HoneyAnt でこの API を利用したエンティティメタクラスを自動生成するようにしました。エンティティメタクラスを利用したタイプセーフなクライテリアは, 以下の場面で使用しました。</p>

<ul>
<li>DAO（Hibernate の Criteria API に変換してタイプセーフなクエリを実現）</li>
<li>継続クエリ（OQL に変換してサーバサイドに登録し, メッセージフィルタとして使用）</li>
</ul>


<p>クライテリア API を独立させることによって, 様々な場面で活用出来る拡張性を持たせています。パーサさえ書けば様々な要素にバインド出来るので, <a href="http://www.mongodb.org/">MongoDB</a> 用のアダプタなんかも作ろうかなと思っていました（このときは使用しなかったので作りませんでしたが）。</p>

<p>では実際に使う場合の簡単な例を紹介します。DAO として使用する場合はこんな感じです（クエリの意味は適当ですスミマセン）。ここではひとつずつ検索条件をその場で作っていますが、<a href="http://rubyonrails.org/">Rails</a> の Named Scope のようにメタクラスに条件を定義することも出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProjectMeta</span> <span class="n">meta</span> <span class="o">=</span> <span class="n">ProjectMeta</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'><span class="n">Dao</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">dao</span> <span class="o">=</span> <span class="n">daoFactory</span><span class="o">.</span><span class="na">createDao</span><span class="o">(</span><span class="n">meta</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ex. update</span>
</span><span class='line'><span class="n">dao</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">project</span><span class="o">);</span>
</span><span class='line'><span class="n">dao</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">project</span><span class="o">);</span>
</span><span class='line'><span class="n">dao</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">project</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ex. entity-query（エンティティ単位）</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">EntityQuery</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">dao</span><span class="o">.</span><span class="na">createQuery</span><span class="o">();</span>
</span><span class='line'>    <span class="n">query</span><span class="o">.</span><span class="na">orderBy</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">id</span><span class="o">,</span> <span class="n">Order</span><span class="o">.</span><span class="na">ASC</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Criteria</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">meta</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">sequenceNo</span><span class="o">.</span><span class="na">lt</span><span class="o">(</span><span class="mi">5</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">status</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">ProjectStatus</span><span class="o">.</span><span class="na">ACTIVE</span><span class="o">));</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">projects</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">list</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ex. projection-query（射影）</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">ProjectionQuery</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">dao</span><span class="o">.</span><span class="na">createProjectionQuery</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Criteria</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">meta</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">admin</span><span class="o">.</span><span class="na">isTrue</span><span class="o">()).</span><span class="na">add</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">status</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">UserStatus</span><span class="o">.</span><span class="na">ACTIVE</span><span class="o">));</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">userIds</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">listValues</span><span class="o">(</span><span class="n">criteria</span><span class="o">,</span> <span class="n">meta</span><span class="o">.</span><span class="na">id</span><span class="o">);</span> <span class="c1">// もちろん複数プロパティの射影も可能</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ex. aggregation-query（集約）</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">AggregationQuery</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">query</span> <span class="o">=</span> <span class="n">dao</span><span class="o">.</span><span class="na">createAggregationQuery</span><span class="o">();</span>
</span><span class='line'>    <span class="n">AggregationFunctionProperty</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">,</span> <span class="n">Long</span><span class="o">&gt;</span> <span class="n">maxUserIdProperty</span> <span class="o">=</span> <span class="n">Aggregations</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">users</span><span class="o">.</span><span class="na">id</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Criteria</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">meta</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="mi">1L</span><span class="o">)).</span><span class="na">add</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">status</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">UserStatus</span><span class="o">.</span><span class="na">ACTIVE</span><span class="o">));</span>
</span><span class='line'>    <span class="n">Long</span> <span class="n">maxUserId</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="na">uniqueValue</span><span class="o">(</span><span class="n">criteria</span><span class="o">,</span> <span class="n">maxUserIdProperty</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>見ての通り一通りタイプセーフにクエリが出来るようになっています。当然ですがクライテリアには強い型制約を持たせています。上記の例ではプロパティ同士の比較はしていませんが, 例えばプロパティ同士の比較クライテリオン ge (greater than or equals to) はこんな感じのシグネチャです。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// E はエンティティの型・C は比較される値の型</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span> <span class="n">C</span> <span class="kd">extends</span> <span class="n">Comparable</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">C</span><span class="o">&gt;&gt;</span> <span class="n">PropertyCompareCriterion</span><span class="o">&lt;</span><span class="n">E</span><span class="o">,</span> <span class="n">C</span><span class="o">,</span> <span class="n">ComparableProperty</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">E</span><span class="o">,</span> <span class="n">C</span><span class="o">&gt;&gt;</span> <span class="n">ge</span><span class="o">(</span><span class="n">ComparableProperty</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">E</span><span class="o">,</span> <span class="n">C</span><span class="o">&gt;</span> <span class="n">condition</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>かなり強い型制約を持たせていることが分かるかと思います。</p>

<p>継続クエリとして使用するときも同じクライテリア API を用いることが出来ます。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ProjectMeta</span> <span class="n">meta</span> <span class="o">=</span> <span class="n">ProjectMeta</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'><span class="n">Criteria</span><span class="o">&lt;</span><span class="n">Project</span><span class="o">&gt;</span> <span class="n">criteria</span> <span class="o">=</span> <span class="n">meta</span><span class="o">.</span><span class="na">createCriteria</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="n">meta</span><span class="o">.</span><span class="na">status</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">ProjectStatus</span><span class="o">.</span><span class="na">ACTIVE</span><span class="o">));</span>
</span><span class='line'><span class="n">CriteriaFilter</span> <span class="n">filter</span> <span class="o">=</span> <span class="n">CriteriaFilterFactory</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">criteria</span><span class="o">);</span>
</span><span class='line'><span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="n">filter</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">project</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>同じ API を使用しているので, 検索条件をひとつ作れば DB アクセスにも継続フィルタを使用した非同期更新キャッシュなんかにも使うことが出来ます。</p>

<h2>というわけで</h2>

<p>色々な用途に使えると思うので, 良ければご自由にお使い下さい。</p>

<p>Java で DSL を作るのは難しいです。DSL を定義するのであれば Groovy や Ruby を使った方がよほど楽でしょう。ですので Java で DSL を無理矢理つくるよりは、タイプセーフなメタ情報を自動生成するのが個人的にはオススメです。今なら <a href="http://www.eclipse.org/Xtext/">Xtext</a> を使うのもひとつ有効な手段なのかもしれませんが、使い慣れた Java で Ant タスクとして自動生成処理を定義したい場合には HoneyAnt を使うのも良いかなと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Subversion to Git]]></title>
    <link href="http://tech.usopla.com/blog/2012/12/22/subversion-to-git/"/>
    <updated>2012-12-22T14:28:00+09:00</updated>
    <id>http://tech.usopla.com/blog/2012/12/22/subversion-to-git</id>
    <content type="html"><![CDATA[<div style="width: 650px">
<script async class="speakerdeck-embed" data-id="d8d803202e250130a32512313918315a" data-ratio="1.6" src="http://tech.usopla.com//speakerdeck.com/assets/embed.js"></script>
</div>


<p>勤務先は未だに Subversion を使っているのですが、いい加減 git を使いましょうということで先日勉強会を開催したのでそのときに使用した資料を Speaker Deck にアップロードしてみました。一部社外に公開出来ないところは削除したり改変したりしているため少々おかしいところがありますが、殆ど社内勉強会で使用した資料と同じものです。良ければご参照ください。勤務先では基本的に Windows + Eclipse 環境で開発している人が多いので、Eclipse や GitHub for Windows によるデモを交えた勉強会にしました。そのため、資料中でも <a href="http://www.eclipse.org/egit/">EGit</a> や <a href="http://windows.github.com/">GitHub for Windows</a> に関する記述が出てきます。ちなみに EGit は今回初めて評価してみたのですが、思った以上に良く出来ていて業務での利用には全く問題ないと判断しました。勿論 git の様々な操作を全て使用出来るようにはなっていませんが、一般的なコマンドについてはカバーしていますし、難しい操作については GitHub for Windows に付属する Shell を使えば問題ありません。</p>

<h2>Subversion の嫌なところ</h2>

<p>Subversion を使っていて日常的に困るのは以下のようなケースです。</p>

<ol>
<li>「とりあえずコミット」が横行するのできちんとしたコードレビューが難しい（レビュー対象が散乱する）</li>
<li>手元の作業記録を簡単に記録出来ないので気楽にリファクタリングすることが出来ない（大規模なリファクタリング中にあれこれ試すのが難しい）</li>
<li>（同じ理由により）並行作業がしづらい（手元でコードを書いているときに別作業を頼まれたら苦労する）</li>
</ol>


<p>git にはローカルリポジトリがあるのでこのような問題点が解決出来ます。</p>

<ol>
<li>コミットを整理してから push 出来る</li>
<li>手元で色々なブランチを作って作業出来る</li>
<li>作業途中で stash 出来る</li>
</ol>


<p>素敵ですよね。</p>

<h2>git が生み出すもの</h2>

<p>勉強会では git を採用することのメリットについてあれこれ話しました。「git を導入したらどれぐらい生産性が上がるの？」というのは、PC やモニタを買うのと一緒でなかなか数値化することが難しいものではありますが、少なくとも参加した皆さんにはある程度良い感触を持ってもらえた思えてもらえたんじゃないかな……？と思います。
個人的には</p>

<ol>
<li>バリバリ開発している人（コア開発者）ほど生産性が上がる</li>
<li>（コア開発者は大抵コードレビューも行うので）コードレビューの時間が取れるようになる</li>
<li>コードレビューの時間が取れる + git 効果でレビューしやすくなるのでレビューの質が上がる</li>
<li>細かなコードレビューでジュニアなメンバーのスキルアップにもつながる</li>
<li>ますますコア開発者の生産性が上がる</li>
</ol>


<p>という良いサイクルを生み出すことが出来るんじゃないかと思っています。また、GitHub や Stash を導入することでエンジニア同士の交流が活性化して、会社の雰囲気や文化が少しでも変わっていく端緒となれば良いなと期待しています。</p>

<h2>気付いたこと</h2>

<p>今まで勉強会など参加したことも殆ど無かったですし、ましてや自分が主催したり発表したりすることも勿論無かったので、今回が初めての経験でした。いざ自分でやってみると、勉強会に参加する態度によって学習効果が大きく違うんだなということを再確認しました。</p>

<ul>
<li>受動的に参加する（相手が言っていることを鵜呑みにするだけ）</li>
<li>能動的に参加する（相手が言っていることを理解しようと努める・疑問を持つ・質問する）</li>
<li>自分でプレゼンする</li>
</ul>


<p>下にいくほど学習効果が高いわけです。良く言われていることですが、今回改めてそのことを実感しました。勉強会でプレゼンしようと思うと事前にしっかり準備しないといけません。資料をつくったり、理解が曖昧なところを深堀しないといけません。</p>

<p>何かを学ぶとき、（相当頭の良い人は別だけど）ふつうの人は受動的に情報を仕入れているだけでは想像力が働きません。けれど人に説明するためにしっかり理解しようとすると、その過程で様々な疑問が出てくる。「調べてみるとこんなことが言われているけど、いったいどういうことなんだろう？」「これはもしかしてこういうことなんじゃないか？」などと<strong>自分の想像力を働かせる機会が増え、曖昧だった知識が体系化され、自分の中の血肉として育っていく</strong>。だから勉強会をするのは（例え自分が理解している「つもり」の物事をテーマにしたとしても）意味のある行為だな、今後はもっと自分で勉強会を主催しよう、などと思ったのでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octopress]]></title>
    <link href="http://tech.usopla.com/blog/2012/12/14/hello-octopress/"/>
    <updated>2012-12-14T01:14:00+09:00</updated>
    <id>http://tech.usopla.com/blog/2012/12/14/hello-octopress</id>
    <content type="html"><![CDATA[<p>前々から日記以外に技術系のブログをひとつ作りたかったので Octopress + GitHub Pages で構築してみました。人に見られることを想定したブログというものはここ数年作っていなかったので本当に久しぶり。主に技術ネタを扱っていきたいと思っているので横幅を広く取れるテーマにしてみました。以下備忘録。</p>

<h2>ブログの設定を変更したとき</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'message'
</span><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>


<h2>記事を書くとき</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ bundle exec rake new_post["title_in_english"]
</span><span class='line'>$ vim source/_posts/your_new_post.markdown
</span><span class='line'>$ bundle exec rake generate
</span><span class='line'>$ bundle exec rake preview -- http://localhost:4000
</span><span class='line'>$ bundle exec rake gen_deploy</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
